// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Result from "@rescript/core/src/Core__Result.mjs";
import * as S$RescriptSchema from "rescript-schema/src/S.mjs";

function identity(a) {
  return a;
}

function mapLeft(fa, f) {
  if (fa.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: fa._0
          };
  } else {
    return {
            TAG: "Error",
            _0: f(fa._0)
          };
  }
}

function fold(fa) {
  if (fa.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: fa._0
          };
  }
  var e = fa._0;
  if (e.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: e._0
          };
  } else {
    return {
            TAG: "Error",
            _0: e._0
          };
  }
}

function chain(result, fab) {
  if (result.TAG === "Ok") {
    return fab(result._0);
  } else {
    return {
            TAG: "Error",
            _0: result._0
          };
  }
}

function chainFirst(result, fab) {
  if (result.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: result._0
          };
  }
  fab(result._0);
  return result;
}

function fromOption(option, error) {
  if (option !== undefined) {
    return {
            TAG: "Ok",
            _0: Caml_option.valFromOption(option)
          };
  } else {
    return {
            TAG: "Error",
            _0: error
          };
  }
}

function fromBool(value, error) {
  if (value) {
    return {
            TAG: "Ok",
            _0: value
          };
  } else {
    return {
            TAG: "Error",
            _0: error
          };
  }
}

function orElse(m, alternative) {
  if (m.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: m._0
          };
  } else {
    return alternative;
  }
}

function stackWithResult(r) {
  return function (a) {
    return Core__Result.map(r, (function (b) {
                  return [
                          a,
                          b
                        ];
                }));
  };
}

function stackWithResult2(r) {
  return function (param) {
    var b = param[1];
    var a = param[0];
    return Core__Result.map(r, (function (c) {
                  return [
                          a,
                          b,
                          c
                        ];
                }));
  };
}

function stackWithResult3(r) {
  return function (param) {
    var c = param[2];
    var b = param[1];
    var a = param[0];
    return Core__Result.map(r, (function (d) {
                  return [
                          a,
                          b,
                          c,
                          d
                        ];
                }));
  };
}

var Result = {
  mapLeft: mapLeft,
  fold: fold,
  chain: chain,
  chainFirst: chainFirst,
  fromOption: fromOption,
  fromBool: fromBool,
  orElse: orElse,
  stackWithResult: stackWithResult,
  stackWithResult2: stackWithResult2,
  stackWithResult3: stackWithResult3
};

function fromResult(r) {
  if (r.TAG === "Ok") {
    return Caml_option.some(r._0);
  }
  
}

var $$Option = {
  fromResult: fromResult
};

function mapValidationError(r, marker) {
  return mapLeft(r, (function (err) {
                return {
                        NAME: "ValidationError",
                        VAL: marker + "\n" + S$RescriptSchema.$$Error.message(err)
                      };
              }));
}

var $$Promise;

export {
  $$Promise ,
  identity ,
  Result ,
  $$Option ,
  mapValidationError ,
}
/* S-RescriptSchema Not a pure module */
